services:
  postgres:
    image: postgres:12.3
    container_name: postgres-container
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=reservation_db
    restart: unless-stopped

  mongodb:
    image: mongo:6.0.8
    hostname: mongodb
    container_name: mongodb-container
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: statistics_db

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper-container
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    hostname: kafka
    container_name: kafka-container
    depends_on:
        - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  connect:
    image: confluentinc/cp-kafka-connect-base:7.3.1
    hostname: connect
    container_name: connect-container
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: kafka-message-group-id
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-config
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.3.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR,com.mongodb.kafka=INFO
    command:
          - /bin/bash
          - -c
          - |
            if [ ! -d /usr/share/confluent-hub-components/mongodb-kafka-connect-mongodb ]; then
              confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:latest
            fi
              /etc/confluent/docker/run & while : ; do
                curl_status=$$(curl -s -o /dev/null -w %{http_code} http://connect:8083/connectors)
                echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
                if [ $$curl_status -eq 200 ] ; then
                  break
                fi
                sleep 5
              done
              curl -X POST -H "Content-Type: application/json" http://connect:8083/connectors -w "\n" \
                 -d '{
                    "name": "statistics_sink",
                    "config": {
                      "connector.class": "com.mongodb.kafka.connect.MongoSinkConnector",
                      "key.converter": "org.apache.kafka.connect.storage.StringConverter",
                      "key.converter.schemas.enable": false,
                      "auto.register.schemas": false,
                      "value.converter": "org.apache.kafka.connect.json.JsonConverter",
                      "value.converter.schemas.enable": false,
                      "document.id.strategy": "com.mongodb.kafka.connect.sink.processor.id.strategy.UuidStrategy",
                      "schemas.enable": false,
                      "cleanup.policy": "compact",
                      "topics": "reservation,user",
                      "connection.uri": "mongodb://root:root@mongodb:27017",
                      "database": "statistics_db"
                    }
                 }'
              sleep infinity
